from Crypto.Util.number import bytes_to_long, getPrime, inverse
from functools import reduce
from secret import flag
m = bytes_to_long(flag)
DN = 1
SIZE = 512
FAC = lambda x : reduce(lambda x,y:x*y,[i+1 for i in range(x)]+[1])
COMBINATION = lambda x,y: FAC(y) // (FAC(x) * FAC(y - x))

if DN % 2 :
    ALPHA = ((2 * DN + 1) * 2 ** DN - 4 * DN * COMBINATION(DN // 2 ,DN)) / ((2 * DN - 2) * 2 ** DN + 8 * DN * COMBINATION(DN // 2 ,DN))
else:
    ALPHA = ((2 * DN + 1) * 2 ** DN  - (2 * DN + 1) * COMBINATION(DN // 2 ,DN)) / ((2 * DN - 2) * 2 ** DN + (4 * DN + 2) * COMBINATION(DN // 2,DN))

D = []
E = []
p,q = getPrime(SIZE),getPrime(SIZE)
n = p * q
while True:
    try:
        d = getPrime(int(ALPHA*SIZE*2))
        e = inverse(d,(p-1) * (q-1))
        E.append(e)
        D.append(d)
        if len(E) == DN:
            break
    except:
        pass
for e in E:
    print(e)
print(n)
print(pow(m,E[0],n))
'''
41350161979943062697369918080801699794632427905284051557230836296123291837297183593383876937292079162832936289653764047405378895526553763812798128202249521218422750738368692000119433011817323075805272907234797934811938640807811866110596135492731891412555029356038511581692235601455633606517435773132088230235      
113233713643159770770624355832097529736585710166336527196421650036473061419267270119921064758255862944390259461086317222584260698844085262648335078829035291826704030032258629275102985901795128967406411224553970365412708119383381936367536402758878198430051352853419927429333884513868136172002091616080322435087     
109580103834554465969014195841825862678161567447006180064694746193506096225700521956653394293700741182646299766629658386883246040681443193085346081058134578721241247099760533218402249270527031468423181153385508261775115787384815279088563548972054618667121889676561357739487553095418684841013291665807362145591  
'''


